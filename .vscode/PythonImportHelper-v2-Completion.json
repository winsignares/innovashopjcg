[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config.common.token",
        "description": "config.common.token",
        "isExtraImport": true,
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "generar_fecha_vencimiento",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def generar_fecha_vencimiento(dias=0, horas=0, minutos=0, segundos=0):\n    fecha_actual = datetime.now(tz=timezone.utc)\n    tiempo_vencimiento = timedelta(\n        days=dias, hours=horas, minutes=minutos, seconds=segundos\n    )\n    fecha_vencimiento = datetime.timestamp(fecha_actual + tiempo_vencimiento)\n    return Out_response(datos=fecha_vencimiento)\n# Funci칩n para generar token\ndef generar_token(user_token, pass_token):\n    try:",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "generar_token",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def generar_token(user_token, pass_token):\n    try:\n        fecha_vencimiento = generar_fecha_vencimiento(segundos=245)[\"token\"]\n        payload = {\n            \"exp\": fecha_vencimiento,\n            \"user_id\": user_token,\n            \"user_pass\": pass_token,\n        }\n        print(f\"Generando Token {payload}\")\n        encoded_jwt = jwt.encode({\"some\": \"payload\"}, \"secret\", algorithm=\"HS256\")",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "verificar_token",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def verificar_token(token):\n    try:\n        print(\"token =>\", token)\n        token_verif = jwt.decode(token, \"pruebaToken\", algorithms=\"HS256\")\n        if token_verif:\n            print(\"token v치lido\")\n            res = {\n                \"error\": False,\n                \"mensaje\": \"token v치lido\"\n            }",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "Out_response",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def Out_response(\n    error=False,\n    mensaje=\"Operaci칩n\\\n    exitosa\",\n    datos=None,\n):\n    res = {\n        \"error\": error,\n        \"mensaje\": mensaje,\n        \"token\": datos,",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "Error_response",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def Error_response(err, mensaje, codigo_error=None):\n    if len(err.args) > 1:\n        res = {\n            \"error\": True,\n            # \"mensaje\": f\"Error interno en el servidor al procesar esta solicitud\",\n            \"mensaje\": f\"{mensaje}\",\n            \"token\": f\"\"\"Codigo interno:{codigo_error}\n\\n\n                Codigo Error: {err.args[0]}\n\\n",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymsql://root@localhost/innovashop'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymsql://root@localhost/innovashop'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "db = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "ma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "peekOfCode": "class Cliente(db.Model):\n    __tablename__ = 'cliente'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre= db.Column(db.String(255), unique=True)\n    email = db.Column(db.String(255))\n    p_number = db.Column(db.Integer)\n    user = db.Column(db.String(50), unique=True)\n    pswd = db.Column(db.String(50))\n    dire = db.Column(db.String(255))\n    id_vendedor = db.Column(db.Integer, db.ForeignKey('vendedor.id'))",
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "ClientesSchema",
        "kind": 6,
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "peekOfCode": "class ClientesSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'p_number', 'user','pswd''dire')",
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Compra",
        "kind": 6,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "class Compra(db.Model):\n    __tablename__ = \"compras\"\n    id = db.Column(db.Integer, primary_key=True)\n    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))\n    codigo = db.Column(db.String(255))\n    nombre = db.Column(db.String(255))\n    cotizacion = db.Column(db.Integer)\n    stock = db.Column(db.Integer)\n    detalles = db.Column(db.String(255))\n    def __init__(self, codigo, nombre, clientes, cotizacion, stock, detalles):",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "CompraSchema",
        "kind": 6,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "class CompraSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'codigo', 'nombre', 'clientes', 'cotizacion', 'stock', 'detalles')\ncompra_schema = CompraSchema()\ncompras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "compra_schema",
        "kind": 5,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "compra_schema = CompraSchema()\ncompras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "compras_schema",
        "kind": 5,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "compras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "Empresa",
        "kind": 6,
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "peekOfCode": "class Empresa(db.Model):\n    __tablename__ = 'empresa'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(50))\n    estado = db.Column(db.String(50), nullable=False, default=\"activo\")\n    fecha_i = db.Column(db.Date) \n    f_plazo = db.Column(db.Date)\n    user = db.Column(db.String(50), unique=True)\n    pswd = db.Column(db.String(50))",
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "EMPSchema",
        "kind": 6,
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "peekOfCode": "class EMPSchema(ma.Schema):\n    class Meta:\n        fields = ('companyid','nombre', 'email', 'estado', 'fecha_i', 'f_plazo','user','pswd')",
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "Productos",
        "kind": 6,
        "importPath": "models.Producto",
        "description": "models.Producto",
        "peekOfCode": "class Productos(db.Model):\n    __tablename__ = \"Producto\"\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255), unique=True)\n    p_uni = db.Column(db.Float())\n    p_venta = db.Column(db.Float())\n    unidades = db.Column(db.Integer)\n    u_admin = db.Column(db.Integer)\n    alternos = db.Column(db.String(255))\n    iva = db.Column(db.Float())",
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "ProductoSchema",
        "kind": 6,
        "importPath": "models.Producto",
        "description": "models.Producto",
        "peekOfCode": "class ProductoSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'p_uni', 'unidades', 'p_venta',  'u_admin', 'alternos', 'u_admin', 'iva', 'src')",
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "kind": 6,
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "peekOfCode": "class Proveedor(db.Model):\n    __tablename__ = 'proveedor'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre= db.Column(db.String(50), unique=True)\n    email = db.Column(db.String(50))\n    p_number = db.Column(db.Integer)\n    dire = db.Column(db.String(50))\n    id_empresa = db.Column(db.Integer, db.ForeignKey('empresa.id'))\n    empresa = db.relationship('empresa', backref=db.backref('proveedores', lazy=True))\n    def __init__(self,id, nombre, email, dire, p_number, id_empresa):",
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "ProveedoresSchema",
        "kind": 6,
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "peekOfCode": "class ProveedoresSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'dire', 'p_number')",
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = \"user\"\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255))\n    contrase침a = db.Column(db.String(255))\n    rol = db.Column(db.String(255))\n    def __init__(self, nombre, contrase침a, rol):\n        self.nombre = nombre\n        self.contrase침a = contrase침a\n        self.rol = rol",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "class UserSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'contrase침a', 'rol')\nuser_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "create_default_data",
        "kind": 2,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "def create_default_data():\n    if not User.query.first():\n        users = [\n            User(nombre='Jesus Garcia', contrase침a='jgarcia123', rol='Empresa'),\n            User(nombre='Juan Verdugo', contrase침a='jberdugo123', rol='Vendedor'),\n            User(nombre='David', contrase침a='dcampo123', rol='Admin')\n        ]\n        db.session.add_all(users)\n        db.session.commit()\nwith app.app_context():",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "kind": 5,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "user_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "users_schema",
        "kind": 5,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "users_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "Vendedor",
        "kind": 6,
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "peekOfCode": "class Vendedor(db.Model):\n    __tablename__ = 'vendedor'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(50))\n    email = db.Column(db.String(50))\n    fecha_inicio = db.Column(db.Date)\n    user = db.Column(db.String(50), unique=True)\n    password = db.Column(db.String(50))\n    company_id = db.Column(db.Integer, db.ForeignKey('empresa.id'))\n    def __init__(self, id, nombre, email, fecha_inicio, user, password, company_id):",
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "VendedorSchema",
        "kind": 6,
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "peekOfCode": "class VendedorSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'fecha_inicio', 'user','password')",
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return \"Hola mundo\"\n@app.route('/obtenertoken', methods=['GET'])\ndef obtenertoken():\n    datatoken = generar_token(\"Gatcia\", 963)\n    var_token = datatoken['token']\n    response = {\n      \"statusCode\": 200,\n      \"body\": json.dumps(var_token)\n    }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "obtenertoken",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def obtenertoken():\n    datatoken = generar_token(\"Gatcia\", 963)\n    var_token = datatoken['token']\n    response = {\n      \"statusCode\": 200,\n      \"body\": json.dumps(var_token)\n    }\n    return jsonify(response)\n@app.route('/verificartoken', methods=['GET'])\ndef verificartoken():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "verificartoken",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verificartoken():\n    token = request.headers['Authorization']\n    token = token.replace(\"Bearer\", \"\")\n    token = token.replace(\" \", \"\")\n    vf = verificar_token(token)\n    return jsonify(vf)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods=['GET'])\ndef index():\n    return \"Hola mundo\"\n@app.route('/obtenertoken', methods=['GET'])\ndef obtenertoken():\n    datatoken = generar_token(\"Gatcia\", 963)\n    var_token = datatoken['token']\n    response = {\n      \"statusCode\": 200,",
        "detail": "app",
        "documentation": {}
    }
]