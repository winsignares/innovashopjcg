[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "users_schema",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "UsersSchema",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "Empresa",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "EmpresaSchema",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "Empresa",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "EmpresaSchema",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "Empresa",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "empresa_schema",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "empresas_schema",
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "isExtraImport": true,
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "importPath": "controllers.user",
        "description": "controllers.user",
        "isExtraImport": true,
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "ruta_user",
        "importPath": "controllers.user",
        "description": "controllers.user",
        "isExtraImport": true,
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "controllers.user",
        "description": "controllers.user",
        "isExtraImport": true,
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "cliente_schema",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "clientes_schema",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "ClientesSchema",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "ClientesSchema",
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "isExtraImport": true,
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "isExtraImport": true,
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "isExtraImport": true,
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "ProveedoresSchema",
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "isExtraImport": true,
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "Productos",
        "importPath": "models.Producto",
        "description": "models.Producto",
        "isExtraImport": true,
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "Productos",
        "importPath": "models.Producto",
        "description": "models.Producto",
        "isExtraImport": true,
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "ProductoSchema",
        "importPath": "models.Producto",
        "description": "models.Producto",
        "isExtraImport": true,
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "Productos",
        "importPath": "models.Producto",
        "description": "models.Producto",
        "isExtraImport": true,
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "ProductoSchema",
        "importPath": "models.Producto",
        "description": "models.Producto",
        "isExtraImport": true,
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "Vendedor",
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "isExtraImport": true,
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "Vendedor",
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "isExtraImport": true,
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "VendedorSchema",
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "isExtraImport": true,
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "Vendedor",
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "isExtraImport": true,
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "VendedorSchema",
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "isExtraImport": true,
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config.common.token",
        "description": "config.common.token",
        "isExtraImport": true,
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ruta_empresa",
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "isExtraImport": true,
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "ruta_productos",
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "isExtraImport": true,
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "ruta_administrador",
        "importPath": "controllers.admin",
        "description": "controllers.admin",
        "isExtraImport": true,
        "detail": "controllers.admin",
        "documentation": {}
    },
    {
        "label": "ruta_vendedor",
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "isExtraImport": true,
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "ruta_proveedores",
        "importPath": "controllers.proveedores",
        "description": "controllers.proveedores",
        "isExtraImport": true,
        "detail": "controllers.proveedores",
        "documentation": {}
    },
    {
        "label": "ruta_clientes",
        "importPath": "controllers.cliente",
        "description": "controllers.cliente",
        "isExtraImport": true,
        "detail": "controllers.cliente",
        "documentation": {}
    },
    {
        "label": "generar_fecha_vencimiento",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def generar_fecha_vencimiento(dias=0, horas=0, minutos=0, segundos=0):\n    fecha_actual = datetime.now(tz=timezone.utc)\n    tiempo_vencimiento = timedelta(\n        days=dias, hours=horas, minutes=minutos, seconds=segundos\n    )\n    fecha_vencimiento = datetime.timestamp(fecha_actual + tiempo_vencimiento)\n    return Out_response(datos=fecha_vencimiento)\n# Función para generar token\ndef generar_token(user_token, pass_token):\n    try:",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "generar_token",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def generar_token(user_token, pass_token):\n    try:\n        fecha_vencimiento = generar_fecha_vencimiento(segundos=245)[\"token\"]\n        payload = {\n            \"exp\": fecha_vencimiento,\n            \"user_id\": user_token,\n            \"user_pass\": pass_token,\n        }\n        print(f\"Generando Token {payload}\")\n        encoded_jwt = jwt.encode({\"some\": \"payload\"}, \"secret\", algorithm=\"HS256\")",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "verificar_token",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def verificar_token(token):\n    try:\n        print(\"token =>\", token)\n        token_verif = jwt.decode(token, \"pruebaToken\", algorithms=\"HS256\")\n        if token_verif:\n            print(\"token válido\")\n            res = {\n                \"error\": False,\n                \"mensaje\": \"token válido\"\n            }",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "Out_response",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def Out_response(\n    error=False,\n    mensaje=\"Operación\\\n    exitosa\",\n    datos=None,\n):\n    res = {\n        \"error\": error,\n        \"mensaje\": mensaje,\n        \"token\": datos,",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "Error_response",
        "kind": 2,
        "importPath": "config.common.token",
        "description": "config.common.token",
        "peekOfCode": "def Error_response(err, mensaje, codigo_error=None):\n    if len(err.args) > 1:\n        res = {\n            \"error\": True,\n            # \"mensaje\": f\"Error interno en el servidor al procesar esta solicitud\",\n            \"mensaje\": f\"{mensaje}\",\n            \"token\": f\"\"\"Codigo interno:{codigo_error}\n\\n\n                Codigo Error: {err.args[0]}\n\\n",
        "detail": "config.common.token",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymsql://root@localhost/innovashop'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymsql://root@localhost/innovashop'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "db = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "ma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "portaladministrativo",
        "kind": 2,
        "importPath": "controllers.admin",
        "description": "controllers.admin",
        "peekOfCode": "def portaladministrativo():\n    empresas = Empresa.query.all()\n    if 'adminu' in session:\n        return render_template('admin.html',usuario = session['adminu'],  empresas=empresas)\n@app.route('/reg_empresa')\ndef crearempresa():\n    return render_template('admin-add-empresas.html')\n@app.route('/search_by')\ndef search():\n    query = request.args.get('query', '')",
        "detail": "controllers.admin",
        "documentation": {}
    },
    {
        "label": "crearempresa",
        "kind": 2,
        "importPath": "controllers.admin",
        "description": "controllers.admin",
        "peekOfCode": "def crearempresa():\n    return render_template('admin-add-empresas.html')\n@app.route('/search_by')\ndef search():\n    query = request.args.get('query', '')\n    if query:\n        empresas = Empresa.query.filter(\n            (Empresa.id.like(f'%{query}%')) |\n            (Empresa.nombre.like(f'%{query}%'))\n        ).all()",
        "detail": "controllers.admin",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "controllers.admin",
        "description": "controllers.admin",
        "peekOfCode": "def search():\n    query = request.args.get('query', '')\n    if query:\n        empresas = Empresa.query.filter(\n            (Empresa.id.like(f'%{query}%')) |\n            (Empresa.nombre.like(f'%{query}%'))\n        ).all()\n    else:\n        empresas = Empresa.query.all()\n    if 'adminu' in session:",
        "detail": "controllers.admin",
        "documentation": {}
    },
    {
        "label": "ruta_administrador",
        "kind": 5,
        "importPath": "controllers.admin",
        "description": "controllers.admin",
        "peekOfCode": "ruta_administrador = Blueprint('route_administrador', __name__)\n@app.route('/admins', methods=['GET'])\ndef portaladministrativo():\n    empresas = Empresa.query.all()\n    if 'adminu' in session:\n        return render_template('admin.html',usuario = session['adminu'],  empresas=empresas)\n@app.route('/reg_empresa')\ndef crearempresa():\n    return render_template('admin-add-empresas.html')\n@app.route('/search_by')",
        "detail": "controllers.admin",
        "documentation": {}
    },
    {
        "label": "client_register",
        "kind": 2,
        "importPath": "controllers.cliente",
        "description": "controllers.cliente",
        "peekOfCode": "def client_register():\n    if request.method == 'POST':\n        idc = request.form['id']\n        nombre = request.form['nombre']\n        p_number = request.form['telefono']\n        email = request.form['email'] \n        user = request.form['user'] \n        pswd = request.form['password'] \n        dire = request.form['direccion']\n        c_bdd = Cliente.query.filter_by(id=idc).all()",
        "detail": "controllers.cliente",
        "documentation": {}
    },
    {
        "label": "portalcliente",
        "kind": 2,
        "importPath": "controllers.cliente",
        "description": "controllers.cliente",
        "peekOfCode": "def portalcliente():\n    if 'usuario' in session:\n        return render_template(\"./Portales/Portal_Cliente.html\")\n    else:\n        return redirect('/')",
        "detail": "controllers.cliente",
        "documentation": {}
    },
    {
        "label": "ruta_clientes",
        "kind": 5,
        "importPath": "controllers.cliente",
        "description": "controllers.cliente",
        "peekOfCode": "ruta_clientes = Blueprint(\"route_clientes\", __name__)\n@app.route('/newcliente', methods=['POST'])\ndef client_register():\n    if request.method == 'POST':\n        idc = request.form['id']\n        nombre = request.form['nombre']\n        p_number = request.form['telefono']\n        email = request.form['email'] \n        user = request.form['user'] \n        pswd = request.form['password'] ",
        "detail": "controllers.cliente",
        "documentation": {}
    },
    {
        "label": "portalempresa",
        "kind": 2,
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "peekOfCode": "def portalempresa():\n    if 'usuario' in session:\n        vendedores = Vendedor.query.all()\n        clientes = Cliente.query.all()\n        proveedores = Proveedor.query.all()\n        productos = Productos.query.all()\n        return render_template(\"./Portales/Portal_Empresa.html\", usuario = session['usuario'], vendedores=vendedores, clientes=clientes, proveedores=proveedores, productos=productos)\n    else:\n        return redirect('/')\n@app.route('/registroempresa', methods=['POST'])",
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "crear_empresa",
        "kind": 2,
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "peekOfCode": "def crear_empresa():\n    if request.method == 'POST':\n        id_empresa = request.form['companyid']\n        user = request.form['user'] \n        password = request.form['password'] \n        nombre = request.form['nombre']\n        email = request.form['email']\n        estado = request.form['status'] \n        fecha_i = request.form['fecha_Inicio']\n        f_plazo = request.form['fecha_final']",
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "ruta_empresa",
        "kind": 5,
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "peekOfCode": "ruta_empresa = Blueprint('ruta_empresa', __name__)\nempresa_schema = EmpresaSchema() \nempresas_schema = EmpresaSchema(many=True) \n@app.route('/Portal_Empresa', methods=['GET'])\ndef portalempresa():\n    if 'usuario' in session:\n        vendedores = Vendedor.query.all()\n        clientes = Cliente.query.all()\n        proveedores = Proveedor.query.all()\n        productos = Productos.query.all()",
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "empresa_schema",
        "kind": 5,
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "peekOfCode": "empresa_schema = EmpresaSchema() \nempresas_schema = EmpresaSchema(many=True) \n@app.route('/Portal_Empresa', methods=['GET'])\ndef portalempresa():\n    if 'usuario' in session:\n        vendedores = Vendedor.query.all()\n        clientes = Cliente.query.all()\n        proveedores = Proveedor.query.all()\n        productos = Productos.query.all()\n        return render_template(\"./Portales/Portal_Empresa.html\", usuario = session['usuario'], vendedores=vendedores, clientes=clientes, proveedores=proveedores, productos=productos)",
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "empresas_schema",
        "kind": 5,
        "importPath": "controllers.empresa",
        "description": "controllers.empresa",
        "peekOfCode": "empresas_schema = EmpresaSchema(many=True) \n@app.route('/Portal_Empresa', methods=['GET'])\ndef portalempresa():\n    if 'usuario' in session:\n        vendedores = Vendedor.query.all()\n        clientes = Cliente.query.all()\n        proveedores = Proveedor.query.all()\n        productos = Productos.query.all()\n        return render_template(\"./Portales/Portal_Empresa.html\", usuario = session['usuario'], vendedores=vendedores, clientes=clientes, proveedores=proveedores, productos=productos)\n    else:",
        "detail": "controllers.empresa",
        "documentation": {}
    },
    {
        "label": "to_float",
        "kind": 2,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "def to_float(value, default=0.0):\n    try:\n        return float(value) if value else default\n    except ValueError:\n        return default\n@productos_bp.route('/create', methods=['POST'])\ndef create_product():\n    id_producto = request.form['id']\n    nombre = request.form.get('nombre', '')\n    preciouni = to_float(request.form.get('preciouni'), 0.0)",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "create_product",
        "kind": 2,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "def create_product():\n    id_producto = request.form['id']\n    nombre = request.form.get('nombre', '')\n    preciouni = to_float(request.form.get('preciouni'), 0.0)\n    alternos = request.form.get('alternos', '')\n    precioventa = to_float(request.form.get('precioventa'), 0.0)\n    cantidad = to_float(request.form.get('cantidad'), 0)\n    cantidadmin = to_float(request.form.get('cantidadmin'), 0)\n    iva = to_float(request.form.get('iva'), 0.0)\n    img = request.files.get('img')",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "def search_products():\n    termino = request.args.get('termino', '')\n    if not termino:\n        return jsonify([])  # Devuelve una lista vacía si el término está vacío\n    # Buscar productos por nombre (ilike es insensible a mayúsculas/minúsculas)\n    productos = Productos.query.filter(Productos.nombre.ilike(f\"%{termino}%\")).limit(10).all()\n    # Devolver una lista de objetos con el ID y el nombre para el frontend\n    return jsonify([{'id': producto.id, 'nombre': producto.nombre} for producto in productos])\n@productos_bp.route('/configure', methods=['POST'])\ndef configure_product():",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "configure_product",
        "kind": 2,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "def configure_product():\n    id_producto = request.form.get(\"id\")\n    preciouni = to_float(request.form.get(\"preciouni\", 0))\n    precio_ganancia = to_float(request.form.get(\"precio_ganancia\", 0))\n    iva = to_float(request.form.get(\"iva\", 0))\n    if not id_producto:\n        return jsonify({\"error\": \"ID del producto es obligatorio\"}), 400\n    producto = Productos.query.filter_by(id=id_producto).first()\n    if producto:\n        ganancia = preciouni * (precio_ganancia / 100)",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "update_product",
        "kind": 2,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "def update_product():\n    id_producto = request.form.get('id')\n    nombre = request.form.get('nombre')\n    alternos = request.form.get('alternos')\n    cantidad = request.form.get('cantidad')\n    cantidadmin = request.form.get('cantidadmin')\n    img = request.files.get('img')\n    producto_existente = Productos.query.filter_by(id=id_producto).first()\n    if producto_existente:\n        if img:",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "productos_bp",
        "kind": 5,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "productos_bp = Blueprint(\"productos\", __name__)\nproducto_schema = ProductoSchema()\nproductos_schema = ProductoSchema(many=True)\ndef to_float(value, default=0.0):\n    try:\n        return float(value) if value else default\n    except ValueError:\n        return default\n@productos_bp.route('/create', methods=['POST'])\ndef create_product():",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "producto_schema",
        "kind": 5,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "producto_schema = ProductoSchema()\nproductos_schema = ProductoSchema(many=True)\ndef to_float(value, default=0.0):\n    try:\n        return float(value) if value else default\n    except ValueError:\n        return default\n@productos_bp.route('/create', methods=['POST'])\ndef create_product():\n    id_producto = request.form['id']",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "productos_schema",
        "kind": 5,
        "importPath": "controllers.productos",
        "description": "controllers.productos",
        "peekOfCode": "productos_schema = ProductoSchema(many=True)\ndef to_float(value, default=0.0):\n    try:\n        return float(value) if value else default\n    except ValueError:\n        return default\n@productos_bp.route('/create', methods=['POST'])\ndef create_product():\n    id_producto = request.form['id']\n    nombre = request.form.get('nombre', '')",
        "detail": "controllers.productos",
        "documentation": {}
    },
    {
        "label": "registrar_proveedor",
        "kind": 2,
        "importPath": "controllers.proveedores",
        "description": "controllers.proveedores",
        "peekOfCode": "def registrar_proveedor():\n    if request.method == 'POST':\n        id_proveedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Direccion = request.form['direccion']\n        Telefono = request.form['telefono'] \n        proveedor_existente = Proveedor.query.filter_by(id=id_proveedor).all()\n        if proveedor_existente:\n            return jsonify({\"error\": \"El ID ya esta en uso.\"}), 409",
        "detail": "controllers.proveedores",
        "documentation": {}
    },
    {
        "label": "ruta_proveedores",
        "kind": 5,
        "importPath": "controllers.proveedores",
        "description": "controllers.proveedores",
        "peekOfCode": "ruta_proveedores = Blueprint(\"route_proveedores\", __name__)\nproveedor_schema= ProveedoresSchema()\nproveedores_schema= ProveedoresSchema(many=True)\n@app.route('/registroproveedor', methods=['POST'])\ndef registrar_proveedor():\n    if request.method == 'POST':\n        id_proveedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Direccion = request.form['direccion']",
        "detail": "controllers.proveedores",
        "documentation": {}
    },
    {
        "label": "generate_expiration_date",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def generate_expiration_date(days=0, hours=0, minutes=0, seconds=0):\n    current_date = datetime.now(tz=timezone.utc)\n    expiration_time = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return current_date + expiration_time\ndef generate_token(user_id):\n    expiration_date = generate_expiration_date(seconds=200)\n    payload = {\n        \"exp\": expiration_date,\n        \"user_id\": user_id,\n    }",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def generate_token(user_id):\n    expiration_date = generate_expiration_date(seconds=200)\n    payload = {\n        \"exp\": expiration_date,\n        \"user_id\": user_id,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token\ndef verify_token(token):\n    try:",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def verify_token(token):\n    try:\n        jwt.decode(token, SECRET_KEY, algorithms=[\"HS256\"])\n        return {\"error\": False, \"message\": \"Valid token\"}\n    except jwt.ExpiredSignatureError:\n        return {\"error\": True, \"message\": \"Expired token\"}\n    except jwt.InvalidTokenError:\n        return {\"error\": True, \"message\": \"Invalid token\"}\ndef token_required(f):\n    @wraps(f)",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "token_required",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = request.cookies.get('token')\n        if not token:\n            return jsonify({'message': 'Token is required!'}), 403\n        try:\n            jwt.decode(token, SECRET_KEY, algorithms=[\"HS256\"])\n        except jwt.ExpiredSignatureError:\n            return jsonify({'message': 'Token has expired!'}), 403",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def login():\n    username = request.form['user'].replace(' ', '')\n    pswd = request.form['pswd']\n    adminu = db.session.query(User).filter(User.user == adminu, User.pswd == pswd, User.is_admin == True).all()\n    vendor = db.session.query(Vendedor).filter(Vendedor.user == username, Vendedor.password == pswd).first()\n    company = db.session.query(Empresa).filter(Empresa.user == username, Empresa.password == pswd).first()\n    client = db.session.query(Cliente).filter(Cliente.user == username, Cliente.password == pswd).first()\n    if adminu:\n        token = generate_token(adminu.id)\n        session['user'] = user_schema.dump(adminu)",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "protected_route",
        "kind": 2,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "def protected_route():\n    return jsonify({'message': 'This is protected content'})",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "auth_bp = Blueprint(\"auth\", __name__)\nuser_schema = UsersSchema()\nSECRET_KEY = \"newtoken\"\ndef generate_expiration_date(days=0, hours=0, minutes=0, seconds=0):\n    current_date = datetime.now(tz=timezone.utc)\n    expiration_time = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return current_date + expiration_time\ndef generate_token(user_id):\n    expiration_date = generate_expiration_date(seconds=200)\n    payload = {",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "kind": 5,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "user_schema = UsersSchema()\nSECRET_KEY = \"newtoken\"\ndef generate_expiration_date(days=0, hours=0, minutes=0, seconds=0):\n    current_date = datetime.now(tz=timezone.utc)\n    expiration_time = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return current_date + expiration_time\ndef generate_token(user_id):\n    expiration_date = generate_expiration_date(seconds=200)\n    payload = {\n        \"exp\": expiration_date,",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "controllers.user",
        "description": "controllers.user",
        "peekOfCode": "SECRET_KEY = \"newtoken\"\ndef generate_expiration_date(days=0, hours=0, minutes=0, seconds=0):\n    current_date = datetime.now(tz=timezone.utc)\n    expiration_time = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return current_date + expiration_time\ndef generate_token(user_id):\n    expiration_date = generate_expiration_date(seconds=200)\n    payload = {\n        \"exp\": expiration_date,\n        \"user_id\": user_id,",
        "detail": "controllers.user",
        "documentation": {}
    },
    {
        "label": "registrar_vendedor",
        "kind": 2,
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "peekOfCode": "def registrar_vendedor():\n    if request.method == 'POST':\n        id_vendedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Fecha_inicio = request.form['fecha_inicio']\n        user = request.form['user'] \n        password = request.form['password'] \n        vendedor_existente = Vendedor.query.filter_by(id=id_vendedor).all()\n        usuario = Vendedor.query.filter_by(user=user).all()",
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "portalvendedor",
        "kind": 2,
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "peekOfCode": "def portalvendedor():\n    if 'usuario' in session:\n        clientes = Cliente.query.all()\n        productos = Productos.query.all()\n        return render_template(\"./Portales/Portal_Vendedores.html\", clientes=clientes, productos=productos)\n    else:\n        return redirect('/')",
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "ruta_vendedor",
        "kind": 5,
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "peekOfCode": "ruta_vendedor = Blueprint(\"route_vendedor\", __name__)\nvendedor_schema = VendedorSchema()\nvendedores_schema = VendedorSchema(many=True)\n@app.route('/registrovendedor', methods=['POST'])\ndef registrar_vendedor():\n    if request.method == 'POST':\n        id_vendedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Fecha_inicio = request.form['fecha_inicio']",
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "vendedor_schema",
        "kind": 5,
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "peekOfCode": "vendedor_schema = VendedorSchema()\nvendedores_schema = VendedorSchema(many=True)\n@app.route('/registrovendedor', methods=['POST'])\ndef registrar_vendedor():\n    if request.method == 'POST':\n        id_vendedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Fecha_inicio = request.form['fecha_inicio']\n        user = request.form['user'] ",
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "vendedores_schema",
        "kind": 5,
        "importPath": "controllers.vendedor",
        "description": "controllers.vendedor",
        "peekOfCode": "vendedores_schema = VendedorSchema(many=True)\n@app.route('/registrovendedor', methods=['POST'])\ndef registrar_vendedor():\n    if request.method == 'POST':\n        id_vendedor = request.form['id']\n        Nombre = request.form['nombre']\n        Email = request.form['email'] \n        Fecha_inicio = request.form['fecha_inicio']\n        user = request.form['user'] \n        password = request.form['password'] ",
        "detail": "controllers.vendedor",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "peekOfCode": "class Cliente(db.Model):\n    __tablename__ = 'cliente'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre= db.Column(db.String(255), unique=True)\n    email = db.Column(db.String(255))\n    p_number = db.Column(db.Integer)\n    user = db.Column(db.String(50), unique=True)\n    pswd = db.Column(db.String(50))\n    dire = db.Column(db.String(255))\n    id_vendedor = db.Column(db.Integer, db.ForeignKey('vendedor.id'))",
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "ClientesSchema",
        "kind": 6,
        "importPath": "models.Cliente",
        "description": "models.Cliente",
        "peekOfCode": "class ClientesSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'p_number', 'user', 'pswd', 'dire')\ncliente_schema= ClientesSchema()\nclientes_schema= ClientesSchema(many=True)",
        "detail": "models.Cliente",
        "documentation": {}
    },
    {
        "label": "Compra",
        "kind": 6,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "class Compra(db.Model):\n    __tablename__ = \"compras\"\n    id = db.Column(db.Integer, primary_key=True)\n    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))\n    vendedor_id = db.Column(db.Integer, db.ForeignKey('vendedor.id'))\n    producto_id = db.Column(db.Integer, db.ForeignKey('productos.id'))\n    codigo = db.Column(db.String(255))\n    nombre = db.Column(db.String(255))\n    cotizacion = db.Column(db.Integer)\n    stock = db.Column(db.Integer)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "CompraSchema",
        "kind": 6,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "class CompraSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'codigo', 'nombre', 'cliente', 'cotizacion', 'stock', 'detalles')\ncompra_schema = CompraSchema()\ncompras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "compra_schema",
        "kind": 5,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "compra_schema = CompraSchema()\ncompras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "compras_schema",
        "kind": 5,
        "importPath": "models.Compra",
        "description": "models.Compra",
        "peekOfCode": "compras_schema = CompraSchema(many=True)",
        "detail": "models.Compra",
        "documentation": {}
    },
    {
        "label": "Cotizacion",
        "kind": 6,
        "importPath": "models.Cotizacion",
        "description": "models.Cotizacion",
        "peekOfCode": "class Cotizacion(db.Model):\n    __tablename__ = \"cotizaciones\"\n    id = db.Column(db.Integer, primary_key=True)\n    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))\n    vendedor_id = db.Column(db.Integer, db.ForeignKey('vendedor.id'))\n    producto_id = db.Column(db.Integer, db.ForeignKey('productos.id'))\n    codigo = db.Column(db.String(255))\n    nombre = db.Column(db.String(255))\n    stock = db.Column(db.Integer)\n    detalles = db.Column(db.String(255))",
        "detail": "models.Cotizacion",
        "documentation": {}
    },
    {
        "label": "CotizacionSchema",
        "kind": 6,
        "importPath": "models.Cotizacion",
        "description": "models.Cotizacion",
        "peekOfCode": "class CotizacionSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'codigo', 'nombre', 'cliente', 'stock', 'detalles')\ncotizacion_schema = CotizacionSchema()\ncotizaciones_schema = CotizacionSchema(many=True)",
        "detail": "models.Cotizacion",
        "documentation": {}
    },
    {
        "label": "cotizacion_schema",
        "kind": 5,
        "importPath": "models.Cotizacion",
        "description": "models.Cotizacion",
        "peekOfCode": "cotizacion_schema = CotizacionSchema()\ncotizaciones_schema = CotizacionSchema(many=True)",
        "detail": "models.Cotizacion",
        "documentation": {}
    },
    {
        "label": "cotizaciones_schema",
        "kind": 5,
        "importPath": "models.Cotizacion",
        "description": "models.Cotizacion",
        "peekOfCode": "cotizaciones_schema = CotizacionSchema(many=True)",
        "detail": "models.Cotizacion",
        "documentation": {}
    },
    {
        "label": "Empresa",
        "kind": 6,
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "peekOfCode": "class Empresa(db.Model):\n    __tablename__ = 'empresa'\n    id = db.Column(db.Integer, primary_key=True)\n    user = db.Column(db.String(50), unique=True)\n    pswd = db.Column(db.String(50))\n    nombre = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(50))\n    estado = db.Column(db.String(50), nullable=False, default=\"activo\")\n    fecha_i = db.Column(db.Date) \n    f_plazo = db.Column(db.Date)",
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "EmpresaSchema",
        "kind": 6,
        "importPath": "models.Empresa",
        "description": "models.Empresa",
        "peekOfCode": "class EmpresaSchema(ma.Schema):\n    class Meta:\n        fields = ('id','user','pswd','nombre', 'email', 'estado', 'fecha_i', 'f_plazo')",
        "detail": "models.Empresa",
        "documentation": {}
    },
    {
        "label": "Productos",
        "kind": 6,
        "importPath": "models.Producto",
        "description": "models.Producto",
        "peekOfCode": "class Productos(db.Model):\n    __tablename__ = \"Producto\"\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255), unique=True)\n    p_uni = db.Column(db.Float())\n    p_venta = db.Column(db.Float())\n    unidades = db.Column(db.Integer)\n    u_admin = db.Column(db.Integer)\n    alternos = db.Column(db.String(255))\n    iva = db.Column(db.Float())",
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "ProductoSchema",
        "kind": 6,
        "importPath": "models.Producto",
        "description": "models.Producto",
        "peekOfCode": "class ProductoSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'p_uni', 'unidades', 'p_venta',  'u_admin', 'alternos', 'u_admin', 'iva', 'src')",
        "detail": "models.Producto",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "kind": 6,
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "peekOfCode": "class Proveedor(db.Model):\n    __tablename__ = 'proveedor'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre= db.Column(db.String(50), unique=True)\n    email = db.Column(db.String(50))\n    p_number = db.Column(db.Integer)\n    dire = db.Column(db.String(50))\n    id_empresa = db.Column(db.Integer, db.ForeignKey('empresa.id'))\n    empresa = db.relationship('empresa', backref=db.backref('proveedores', lazy=True))\n    def __init__(self,id, nombre, email, dire, p_number, id_empresa):",
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "ProveedoresSchema",
        "kind": 6,
        "importPath": "models.Proveedor",
        "description": "models.Proveedor",
        "peekOfCode": "class ProveedoresSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'dire', 'p_number')",
        "detail": "models.Proveedor",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = \"user\"\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255))\n    contraseña = db.Column(db.String(255))\n    user = db.Column(db.String(255))\n    is_admin = db.Column(db.Boolean)\n    def __init__(self, nombre, contraseña, user, is_admin):\n        self.nombre = nombre\n        self.contraseña = contraseña",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "class UserSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'contraseña', 'user', 'rol')\nuser_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "create_default_data",
        "kind": 2,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "def create_default_data():\n    if not User.query.first():\n        users = [\n            User(nombre='Jesus Garcia', contraseña='jgarcia123', user='jesusgarcia123', is_admin=True),\n            User(nombre='Juan Verdugo', contraseña='jberdugo123', user='juanberdugo123', is_admin=True),\n            User(nombre='David Campo', contraseña='dcampo123', user='davidcampo123', is_admin=True)\n        ]\n        db.session.add_all(users)\n        db.session.commit()\nwith app.app_context():",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "kind": 5,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "user_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "users_schema",
        "kind": 5,
        "importPath": "models.User",
        "description": "models.User",
        "peekOfCode": "users_schema = UserSchema(many=True)",
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "Vendedor",
        "kind": 6,
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "peekOfCode": "class Vendedor(db.Model):\n    __tablename__ = 'vendedor'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(50))\n    email = db.Column(db.String(50))\n    fecha_inicio = db.Column(db.Date)\n    user = db.Column(db.String(50), unique=True)\n    password = db.Column(db.String(50))\n    company_id = db.Column(db.Integer, db.ForeignKey('empresa.id'))\n    def __init__(self, id, nombre, email, fecha_inicio, user, password, company_id):",
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "VendedorSchema",
        "kind": 6,
        "importPath": "models.Vendedor",
        "description": "models.Vendedor",
        "peekOfCode": "class VendedorSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'email', 'fecha_inicio', 'user','password')",
        "detail": "models.Vendedor",
        "documentation": {}
    },
    {
        "label": "obtenertoken",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def obtenertoken():\n    datatoken = generar_token(\"Gatcia\", 963)\n    var_token = datatoken['token']\n    response = {\n      \"statusCode\": 200,\n      \"body\": json.dumps(var_token)\n    }\n    return jsonify(response)\n@app.route('/verificartoken', methods=['GET'])\ndef verificartoken():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "verificartoken",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verificartoken():\n    token = request.headers['Authorization']\n    token = token.replace(\"Bearer\", \"\")\n    token = token.replace(\" \", \"\")\n    vf = verificar_token(token)\n    return jsonify(vf)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nfrom controllers.empresa import ruta_empresa\nfrom controllers.productos import ruta_productos\nfrom controllers.admin import ruta_administrador\nfrom controllers.vendedor import ruta_vendedor\nfrom controllers.proveedores import ruta_proveedores\nfrom controllers.cliente import ruta_clientes\nfrom controllers.user import ruta_user, User\n@app.route('/obtenertoken', methods=['GET'])\ndef obtenertoken():",
        "detail": "app",
        "documentation": {}
    }
]